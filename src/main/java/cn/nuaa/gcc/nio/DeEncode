ASCII（American Standard Code For Information Interchange 美国信息交换标准代码）。
7 bit来表示一个字符，共计表示128种字符。

ISO-8859-1（向上兼容ASCII）
8 bit表示一个字符，即用一个字节（byte）(8 bit)来表示一个字符，共计可以表示256个字符

gb2312
一个中文字符占用2个字节，ascii字符的码值在0-127之间，中文字符的两个字节的码值都是在127-256之间。
（兼容ASCII编码方式的变长字节编码）


gbk（加入一些生僻字）
两个字节表示一个汉字
gbk也是一种中文编码，其兼容gb2312编码，并且比gb2312包含了更多的汉字，与gb2312不同的是gbk在存储中文时，
第一个字节码值在127-256之间，第二个字节的码值在0-256之间，所以gbk能表示更多的汉字。

gb18030（汉字包含最多）

big5（繁体中文，台湾）

unicode
Unicode 编码方案
它仅仅只是一个字符集，规定了符合对应的二进制代码，至于这个二进制代码如何存储则没有任何规定。它的想法很简单，就是为
每个字符规定一个用来表示该字符的数字(只是规定了某个字符怎么用数字表示，至于这个数字怎么存储是下面utf-8的事情)
之前提到，Unicode 没有规定字符对应的二进制码如何存储。以汉字“汉”为例，它的 Unicode 码点是 0x6c49，对应的二进制数是 110110001001001，二进制数有 15 位，这也就说明了它至少需要 2 个字节来表示。可以想象，在 Unicode 字典中往后的字符可能就需要 3 个字节或者 4 个字节，甚至更多字节来表示了。

这就导致了一些问题，计算机怎么知道你这个 2 个字节表示的是一个字符，而不是分别表示两个字符呢？这里我们可能会想到，那就取个最大的，假如 Unicode 中最大的字符用 4 字节就可以表示了，那么我们就将所有的字符都用 4个字节来表示，不够的就往前面补 0。这样确实可以解决编码问题，但是却造成了空间的极大浪费，如果是一个英文文档，那文件大小就大出了 3 倍，这显然是无法接受的。

于是，为了较好的解决 Unicode 的编码问题， UTF-8 和 UTF-16 两种当前比较流行的编码方式诞生了。当然还有一个
 UTF-32 的编码方式，也就是上述那种定长编码，字符统一使用 4 个字节，虽然看似方便，但是却不如另外两种编码方式使
 用广泛。


utf-8（Unicode Translation Format）
unicode是一种编码方式，而UTF则是一种存储方式；UTF-8是Unicode的实现方式之一
utf-8是一种国际化的编码方式，其包含世界各国的大部分文字，并且兼容ascii编码。在utf-8中，用1-6个字节来存储一个字符。具体如何区分某个字符

占几个字节呢？这就要看字符的第一个字节特征了

当第一个字节的二进制以‘0’开头时，表示这是个ascii字符，即只占一个字节
当以'110'开头时，表示这个字符占2个字节，其后的1个字节也属于该字符
当以'1110'开头时，表示这个字符占3个字节，其后的2个字节也属于该字符,
当以'11110'开头时，表示这个字符占4个字节，其后的3个字节也属于该字符
当以'111110'开头时，表示这个字符占5个字节，其后的4个字节也属于该字符
当以'1111110'开头时，表示这个字符占6个字节，其后的5个字节也属于该字符
其中大部分的中文在utf8中都占3个字节，即第一个字节以1110开头那一类。


